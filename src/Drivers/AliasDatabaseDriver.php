<?php

namespace Neuron\Database\Drivers;

use Neuron\Database\AbstractDatabaseDriver;
use Neuron\Database\DatabaseDriver;
use Neuron\Database\DatabaseInterface;
use Neuron\Database\Exceptions\AliasRecursionException;
use Neuron\Database\FetchMode;
use Psr\Log\LoggerInterface;

#[DatabaseDriver]
class AliasDatabaseDriver extends AbstractDatabaseDriver
{
    private DatabaseInterface $database;
    private string $target;
    public function __construct(LoggerInterface $logger, DatabaseInterface $database, string $target)
    {
        parent::__construct($logger);

        $this->database = $database;
        $this->target = $target;
    }

    /**
     * @inheritDoc
     * @throws AliasRecursionException
     */
    public function setName(string $name): void
    {
        if ($name === $this->target) {
            $this->logger->error('The alias driver detected a recursion', ['name' => $name]);
            throw new AliasRecursionException($name);
        }
        parent::setName($name); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritDoc
     */
    public function count(string $query, array $parameters = []): int
    {
        return $this->database->count($query, $parameters, $this->target);
    }

    /**
     * @inheritDoc
     */
    public function execute(string $query, array $parameters = []): int|bool
    {
        return $this->database->execute($query, $parameters, $this->target);
    }

    /**
     * @inheritDoc
     */
    public function fetchScalar(string $query, array $parameters = [], mixed $default = null): mixed
    {
        return $this->database->fetchScalar($query, $parameters, $default, $this->target);
    }

    /**
     * @inheritDoc
     */
    public function fetchOne(string $query, array $parameters = []): array|false
    {
        return $this->database->fetchOne($query, $parameters, $this->target);
    }

    /**
     * @inheritDoc
     */
    public function fetchAll(string $query, array $parameters = [], FetchMode $fetchMode = FetchMode::FETCH_ASSOC): array
    {
        return $this->database->fetchAll($query, $parameters, $fetchMode, $this->target);
    }

    /**
     * @inheritDoc
     */
    public function transaction(callable $callback): mixed
    {
        return $this->database->transaction($callback, $this->target);
    }

    /**
     * @inheritDoc
     */
    public function lastInsertId(): string|false
    {
        return $this->database->lastInsertId($this->target);
    }

    /**
     * @inheritDoc
     */
    public function ping(): bool
    {
        return $this->database->ping($this->target);
    }
}